
// //A list of classes taught by a particular teacher
// router.get('/api/classes/:id/teachers', (req, res) => {
//   var teacher = {}

//   for(ClassSpesc of data.classes) {
//     if (ClassSpesc.id == req.params.id) {
//       console.log("Found: ", ClassSpesc)
//       data.teachers.forEach(teacher => {
//         var contains = teacher.classes.includes(ClassSpesc.id)
//         if (contains) {
//           console.log("Teacher found: ", teacher)
//         }
//       })
       
      
//     }
//   }
// data.teachers.forEach(teacher => {
//   var contains = teacher.classes.includes(Number(req.params.id))
//   console.log(contains)
//   if (contains) {
//     console.log("Teacher found: ", teacher)
//     res.json(teacher)
//   }
// })
// res.json(teacher)

// })


  //A list of classes taught by a particular teacher
// router.get('api/teachers/:id/classes', (req, res) => {
//   let teacherClass = [];
//   let myClasses = [];
//   let teacher = {};

//   for(let i = 0; i < data.teachers.length; i++) {
//     if (data.teachers[i].id === req.params.id) {
//       teacher = data.teachers[i]
//       data.teachers[i].classes.forEach(function(cl){
//         data.classes.forEach(tclass => {
//           myClasses.push(tclass)
//         })
//         teacher.classes = myClasses
//       })
//     }
//   }


//   res.json(teacher);


// });















require('dotenv').config()

const express = require('express')
const app = express()
const jwt = require('jsonwebtoken')

app.use(express.json())

let refreshTokens = []

app.post('/token', (req, res) => {
  const refreshToken = req.body.token
  if (refreshToken == null) return res.sendStatus(401)
  if (!refreshTokens.includes(refreshToken)) return res.sendStatus(403)
  jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
    if (err) return res.sendStatus(403)
    const accessToken = generateAccessToken({ name: user.name })
    res.json({ accessToken: accessToken })
  })
})

app.delete('/logout', (req, res) => {
  refreshTokens = refreshTokens.filter(token => token !== req.body.token)
  res.sendStatus(204)
})

app.post('/login', (req, res) => {
  // Authenticate User

  const username = req.body.username
  const user = { name: username }

  const accessToken = generateAccessToken(user)
  const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET)
  refreshTokens.push(refreshToken)
  res.json({ accessToken: accessToken, refreshToken: refreshToken })
})

function generateAccessToken(user) {
  return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15s' })
}


